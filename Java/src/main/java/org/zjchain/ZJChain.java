package org.zjchain;

import com.google.protobuf.ByteString;

import org.json.JSONObject;
import org.apache.http.HttpEntity;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.bouncycastle.util.encoders.Hex;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.ECKeyPair;
import org.web3j.crypto.Hash;
import org.web3j.crypto.Sign;
import org.web3j.utils.Numeric;
import org.web3j.abi.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.UUID;

import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;

import com.alibaba.fastjson.JSON;
import java.util.concurrent.ThreadLocalRandom;
import java.util.Random;
import java.util.Date;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoField;



/*
 * example:
 * 
 *      String privateKey = "b5039128131f96f6164a33bc7fbc48c2f5cf425e8476b1c4d0f4d186fbd0d708";
        ECKeyPair keyPair = ZJChain.GetKeyPair(privateKey);
        String dataId = "123";
        String data = "data";
        // 1. 发布
        Response res = ZJChain.CreateDataAuth(keyPair, dataId, data);

        Thread.sleep(3000);

        // 2. 确权
        Response res = ZJChain.DataAuth(keyPair, dataId, data);

        Thread.sleep(3000);

        // 3. 确权数据查询
        int limit = 100;
        int offset = 0;
        Response res = ZJChain.GetAuths(keyPair, dataId, limit, offset);
        System.out.println(res.getCode() + res.getContent());
 */


// ZJChain SDK
public class ZJChain {
    private static String contractCodes = "";
    private static String managerAddr = "0xe252D01A37b85E2007Ed3CC13797aa92496204A4";
    // private static String baseUrl = "http://82.156.224.174:8080";
    private static String baseUrl = "http://44.216.214.237:8000";
    private static int target_sharding_id = 3;

    public enum ActionType
    {
        PUBLISH, // 发布
        VIEW, // 查看
        DOWNLOAD, // 下载
        COLLECT, // 收藏
        TO_MYDDE, // MYDDE 上使用
        TO_EARTH, // ee 上查看
    }


    public static void main(String[] args) {
        // String privateKey = "fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971";
        String privateKey = "b5039128131f96f6164a33bc7fbc48c2f5cf425e8476b1c4d0f4d186fbd0d708";

        ZJChain.SetBaseUrl("http://10.101.20.35:8785");
        KeyPair keyPair = ZJChain.GetKeyPair(privateKey);
        String dataId = "21";

        Response res = ZJChain.GetAuths(keyPair, dataId, 10, 0);
        System.out.println(res.getCode() + res.getContent());

        // mockDatas(keyPair);

        tryCreate(keyPair, dataId);
    }

    private static void mockDatas(KeyPair keyPair) {
        ArrayList<String> dataIds = new ArrayList<>();
        // dataIds.add("17F5B85CAFC21000");
        dataIds.add("17F5B7CADE821000");
        dataIds.add("17F5B75F46421000");
        dataIds.add("1808DAA378C21000");
        dataIds.add("1808DCA90E421000");
        dataIds.add("1808DCD50F421000");
        dataIds.add("1808DD547F821000");
        dataIds.add("1808DD8EFEC21000");
        dataIds.add("1808DEA031421000");
        dataIds.add("1808DF027E821000");
        
        String actionTime = "2023-12-07 15:00:00";

        for (int i = 0; i < dataIds.size(); i++) {
            String dataId = dataIds.get(i);
            int logNum = randomNum(5, 20);
            for (int j = 0; j < logNum; j++) {
                actionTime = randomTimeStr(actionTime);
                System.out.println(actionTime);
                AddDataAuth(keyPair, dataId, randomPostData(actionTime));
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {};   
            }
     
        }
    }

    private static String randomPostData(String actionTime) {
        String tmp = "{\"action_type\": %d, \"data\": \"\", \"action_user\": \"admin\", \"action_time\": \"%s\"}";
        String postData = String.format(tmp, randomNum(1, 5), actionTime);

        return postData;
    }

    private static String randomTimeStr(String after) {
        String newTime = "";
        try {
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date d = df.parse(after); 
            Calendar cal = Calendar.getInstance();
            cal.setTime(d);
            cal.add(Calendar.HOUR, randomNum(0, 1));
            cal.add(Calendar.MINUTE, randomNum(0, 60));
            cal.add(Calendar.SECOND, randomNum(0, 60));
            newTime = df.format(cal.getTime());
            
        } catch (Exception e) {

        }
        return newTime;
    }

    private static int randomNum(int min, int max) {
        return ThreadLocalRandom.current().nextInt(min, max + 1);
    }

    private static void tryCreate(KeyPair keyPair, String dataId) {
        String data = "{\"action_type\": 0, \"action_user\": \"admin\", \"action_time\": \"2023-12-05 17:30:00\", \"data\": {\n" + //
                "  \"baseInfo\": {\n" + //
                "    \"dataAddress\": \"17F5B85CAFC21000\",\n" + //
                "    \"status\": 1,\n" + //
                "    \"type\": \"map\",\n" + //
                "    \"authorizationType\": \"Public\",\n" + //
                "    \"baseInfoStatus\": 1,\n" + //
                "    \"name\": \"Detrital zircon - Map\",\n" + //
                "    \"version\": \"1.0\",\n" + //
                "    \"description\": \"Detrital zircons provide one of the biggest data in geoscience research. Improvements in analytical technique and data processing lead to a large deposit of detrital zircon geochronology and geochemical-isotopic data in published journal articles, thesis, and reports. Under the support of Deep-time Digital Earth Big Science Program, OneSediment Project conducted a team-working effort to assemble the detrital zircon data for mainland China and adjacent regions (middle East, Turkey, Cyprus and Greek peninsula). Entity-Relationship diagram was constructed for detrital zircon data to determine what information need to be collected. Researchers and students from 13 institutions were organized together to fulfill this task and generated 13 detrital zircon datasets. The assembled datasets totally include 6,635 samples and 56,0596 analyses. They can be used to track crustal growth, tectonic evolution, provenance analysis and paleogeographic change in regional and, when combined with other detrital zircon dataset, global scales.\",\n" + //
                "    \"subjectIds\": \"25\",\n" + //
                "    \"subjects\": [\n" + //
                "      {\n" + //
                "        \"id\": 25,\n" + //
                "        \"level\": 2,\n" + //
                "        \"parent\": 15,\n" + //
                "        \"name\": \"Sedimentology\",\n" + //
                "        \"icon\": \"\",\n" + //
                "        \"description\": \"\",\n" + //
                "        \"count\": null\n" + //
                "      }\n" + //
                "    ],\n" + //
                "    \"tagIds\": null,\n" + //
                "    \"tags\": null,\n" + //
                "    \"dataNodeIds\": null,\n" + //
                "    \"dataNodeIdList\": null,\n" + //
                "    \"dataNodes\": null,\n" + //
                "    \"credence\": \"Official\",\n" + //
                "    \"browseGraph\": \"\",\n" + //
                "    \"license\": null,\n" + //
                "    \"intellectualProp\": null,\n" + //
                "    \"discipline\": null,\n" + //
                "    \"source\": null,\n" + //
                "    \"authorName\": null,\n" + //
                "    \"authorMail\": null,\n" + //
                "    \"associatedResource\": \"INNER##Detrital zircon - Database\",\n" + //
                "    \"associatedResourceUrl\": \"17F5B9A20E421000\",\n" + //
                "    \"intellectualGraph\": \"<p></p>\",\n" + //
                "    \"spatialInfoStatus\": 1,\n" + //
                "    \"minX\": \"-180\",\n" + //
                "    \"minY\": \"-90\",\n" + //
                "    \"maxX\": \"180\",\n" + //
                "    \"maxY\": \"90\",\n" + //
                "    \"resolution\": null,\n" + //
                "    \"coordinateReferenceSystem\": null,\n" + //
                "    \"elevation\": \"0\",\n" + //
                "    \"temporalInfoStatus\": 0,\n" + //
                "    \"geologicTime\": null,\n" + //
                "    \"geologicAge\": null,\n" + //
                "    \"geologicalBase\": null,\n" + //
                "    \"geologicalTop\": null,\n" + //
                "    \"gtsVersion\": null,\n" + //
                "    \"requestUrl\": \"https://carto.deep-time.org/user/wuchaowei/api/v1/map/named/tpl_3f47acbd_b633_454d_bef4_a8693ef96ffe/mapnik/{z}/{x}/{y}.png\",\n" + //
                "    \"dataSource\": 1,\n" + //
                "    \"extend1\": null,\n" + //
                "    \"extend2\": null\n" + //
                "  },\n" + //
                "  \"register\": {\n" + //
                "    \"type\": \"map\",\n" + //
                "    \"connectorType\": null,\n" + //
                "    \"connectorName\": null,\n" + //
                "    \"connectorDescription\": null,\n" + //
                "    \"connectInfoDatabase\": [],\n" + //
                "    \"tableName\": null,\n" + //
                "    \"endpoint\": \"carto.deep-time.org\",\n" + //
                "    \"tls\": \"Yes\",\n" + //
                "    \"description\": null,\n" + //
                "    \"serviceType\": null,\n" + //
                "    \"path\": \"/user/wuchaowei/api/v1/map/named/tpl_3f47acbd_b633_454d_bef4_a8693ef96ffe/mapnik/{z}/{x}/{y}.png\",\n" + //
                "    \"gisProtocol\": \"OGC\",\n" + //
                "    \"mapProtocol\": \"TMS\",\n" + //
                "    \"mapThumbnail\": null,\n" + //
                "    \"mapHeaders\": \"{}\",\n" + //
                "    \"mapQueryParameters\": \"{}\",\n" + //
                "    \"mapOtherParameters\": \"{\\\"version\\\":\\\"TMS 1.0.0\\\",\\\"layer\\\":\\\"tpl_3f47acbd_b633_454d_bef4_a8693ef96ffe\\\"}\",\n" + //
                "    \"linkType\": null,\n" + //
                "    \"doi\": null,\n" + //
                "    \"fileSize\": null,\n" + //
                "    \"records\": null,\n" + //
                "    \"fileType\": null,\n" + //
                "    \"subDataType\": null,\n" + //
                "    \"storageType\": null,\n" + //
                "    \"connectInfoStorage\": [],\n" + //
                "    \"storageFilePath\": null,\n" + //
                "    \"url\": \"carto.deep-time.org/user/wuchaowei/api/v1/map/named/tpl_3f47acbd_b633_454d_bef4_a8693ef96ffe/mapnik/{z}/{x}/{y}.png\"\n" + //
                "  },\n" + //
                "  \"apiDefine\": null,\n" + //
                "  \"tableColumnList\": null\n" + //
                "}}";


        ZJChain.CreateDataAuth(keyPair, dataId, data);
        
        try {
            Thread.sleep(1000);
        } catch (Exception e) {

        }
        data = "{\"type\": 1, \"data\": \"自建\"}";
        
        ZJChain.AddDataAuth(keyPair, dataId, data);

        data = "{\"action_type\": 0, \"action_user\": \"new admin\", \"action_time\": \"2023-12-05 17:30:00\", \"data\": {\n" + //
                "  \"baseInfo\": {\n" + //
                "    \"dataAddress\": \"17F5B85CAFC21000\",\n" + //
                "    \"status\": 1,\n" + //
                "    \"type\": \"map\",\n" + //
                "    \"authorizationType\": \"Public\",\n" + //
                "    \"baseInfoStatus\": 1,\n" + //
                "    \"name\": \"Detrital zircon - Map\",\n" + //
                "    \"version\": \"1.0\",\n" + //
                "    \"description\": \"Detrital zircons provide one of the biggest data in geoscience research. Improvements in analytical technique and data processing lead to a large deposit of detrital zircon geochronology and geochemical-isotopic data in published journal articles, thesis, and reports. Under the support of Deep-time Digital Earth Big Science Program, OneSediment Project conducted a team-working effort to assemble the detrital zircon data for mainland China and adjacent regions (middle East, Turkey, Cyprus and Greek peninsula). Entity-Relationship diagram was constructed for detrital zircon data to determine what information need to be collected. Researchers and students from 13 institutions were organized together to fulfill this task and generated 13 detrital zircon datasets. The assembled datasets totally include 6,635 samples and 56,0596 analyses. They can be used to track crustal growth, tectonic evolution, provenance analysis and paleogeographic change in regional and, when combined with other detrital zircon dataset, global scales.\",\n" + //
                "    \"subjectIds\": \"25\",\n" + //
                "    \"subjects\": [\n" + //
                "      {\n" + //
                "        \"id\": 25,\n" + //
                "        \"level\": 2,\n" + //
                "        \"parent\": 15,\n" + //
                "        \"name\": \"Sedimentology\",\n" + //
                "        \"icon\": \"\",\n" + //
                "        \"description\": \"\",\n" + //
                "        \"count\": null\n" + //
                "      }\n" + //
                "    ],\n" + //
                "    \"tagIds\": null,\n" + //
                "    \"tags\": null,\n" + //
                "    \"dataNodeIds\": null,\n" + //
                "    \"dataNodeIdList\": null,\n" + //
                "    \"dataNodes\": null,\n" + //
                "    \"credence\": \"Official\",\n" + //
                "    \"browseGraph\": \"\",\n" + //
                "    \"license\": null,\n" + //
                "    \"intellectualProp\": null,\n" + //
                "    \"discipline\": null,\n" + //
                "    \"source\": null,\n" + //
                "    \"authorName\": null,\n" + //
                "    \"authorMail\": null,\n" + //
                "    \"associatedResource\": \"INNER##Detrital zircon - Database\",\n" + //
                "    \"associatedResourceUrl\": \"17F5B9A20E421000\",\n" + //
                "    \"intellectualGraph\": \"<p></p>\",\n" + //
                "    \"spatialInfoStatus\": 1,\n" + //
                "    \"minX\": \"-180\",\n" + //
                "    \"minY\": \"-90\",\n" + //
                "    \"maxX\": \"180\",\n" + //
                "    \"maxY\": \"90\",\n" + //
                "    \"resolution\": null,\n" + //
                "    \"coordinateReferenceSystem\": null,\n" + //
                "    \"elevation\": \"0\",\n" + //
                "    \"temporalInfoStatus\": 0,\n" + //
                "    \"geologicTime\": null,\n" + //
                "    \"geologicAge\": null,\n" + //
                "    \"geologicalBase\": null,\n" + //
                "    \"geologicalTop\": null,\n" + //
                "    \"gtsVersion\": null,\n" + //
                "    \"requestUrl\": \"https://carto.deep-time.org/user/wuchaowei/api/v1/map/named/tpl_3f47acbd_b633_454d_bef4_a8693ef96ffe/mapnik/{z}/{x}/{y}.png\",\n" + //
                "    \"dataSource\": 1,\n" + //
                "    \"extend1\": null,\n" + //
                "    \"extend2\": null\n" + //
                "  },\n" + //
                "  \"register\": {\n" + //
                "    \"type\": \"map\",\n" + //
                "    \"connectorType\": null,\n" + //
                "    \"connectorName\": null,\n" + //
                "    \"connectorDescription\": null,\n" + //
                "    \"connectInfoDatabase\": [],\n" + //
                "    \"tableName\": null,\n" + //
                "    \"endpoint\": \"carto.deep-time.org\",\n" + //
                "    \"tls\": \"Yes\",\n" + //
                "    \"description\": null,\n" + //
                "    \"serviceType\": null,\n" + //
                "    \"path\": \"/user/wuchaowei/api/v1/map/named/tpl_3f47acbd_b633_454d_bef4_a8693ef96ffe/mapnik/{z}/{x}/{y}.png\",\n" + //
                "    \"gisProtocol\": \"OGC\",\n" + //
                "    \"mapProtocol\": \"TMS\",\n" + //
                "    \"mapThumbnail\": null,\n" + //
                "    \"mapHeaders\": \"{}\",\n" + //
                "    \"mapQueryParameters\": \"{}\",\n" + //
                "    \"mapOtherParameters\": \"{\\\"version\\\":\\\"TMS 1.0.0\\\",\\\"layer\\\":\\\"tpl_3f47acbd_b633_454d_bef4_a8693ef96ffe\\\"}\",\n" + //
                "    \"linkType\": null,\n" + //
                "    \"doi\": null,\n" + //
                "    \"fileSize\": null,\n" + //
                "    \"records\": null,\n" + //
                "    \"fileType\": null,\n" + //
                "    \"subDataType\": null,\n" + //
                "    \"storageType\": null,\n" + //
                "    \"connectInfoStorage\": [],\n" + //
                "    \"storageFilePath\": null,\n" + //
                "    \"url\": \"carto.deep-time.org/user/wuchaowei/api/v1/map/named/tpl_3f47acbd_b633_454d_bef4_a8693ef96ffe/mapnik/{z}/{x}/{y}.png\"\n" + //
                "  },\n" + //
                "  \"apiDefine\": null,\n" + //
                "  \"tableColumnList\": null\n" + //
                "}}";        
        ZJChain.ReCreateDataAuth(keyPair, dataId, data);
    }

    public static void SetBaseUrl(String base) {
        baseUrl = base;
    }

    public static String GetBaseUrl() {
        return baseUrl;
    }

    // GetKeyPair 根据私钥获取密钥对
    public static KeyPair GetKeyPair(String privateKeyStr) {
    	BigInteger privKey = new BigInteger(privateKeyStr, 16);
        BigInteger pubKey = Sign.publicKeyFromPrivate(privKey);
        ECKeyPair keyPair = new ECKeyPair(privKey, pubKey);
        return new KeyPair(keyPair.getPrivateKey(), keyPair.getPublicKey());
    }

    // GetAccountId 根据密钥对获取 AccountId
    public static String GetAccountId(KeyPair keyPair) {
        byte[] pk_arr = keyPair.getPublicKey().toByteArray();
        String accountId = "";
        if (pk_arr.length > 64) {
            byte[] slice = Arrays.copyOfRange(keyPair.getPublicKey().toByteArray(), 1, 65);
            byte[] addHex = Arrays.copyOfRange(Hash.sha3(slice), 12, 32);
            accountId = Hex.toHexString(addHex);
        } else {
            byte[] slice = Arrays.copyOfRange(keyPair.getPublicKey().toByteArray(), 0, 64);
            byte[] addHex = Arrays.copyOfRange(Hash.sha3(slice), 12, 32);
            accountId = Hex.toHexString(addHex);
        }
        return accountId;
    }

    // CreateDataAuth 发布
    public static Response CreateDataAuth(KeyPair keyPair, String dataId, String data) {
        JSONObject postData = GenCreateDataAuthParams(keyPair, dataId, data);
        return CallTransaction(postData);
    }

    // GenCreateDataAuthParams 获取首次确权参数
    private static JSONObject GenCreateDataAuthParams(KeyPair keyPair, String dataId, String data) {
        data = JSON.toJSONString(data);
		List<Address> addresses = new ArrayList<>();
        addresses.add(new Address(managerAddr));
        
        List<Type> inputParameters = Arrays.asList(
            new DynamicArray(StaticStruct.class, addresses), 
            new DynamicBytes(dataId.getBytes(StandardCharsets.UTF_8)), 
            new DynamicBytes(data.getBytes(StandardCharsets.UTF_8)));

        String input = FunctionEncoder.encodeConstructor(inputParameters);
        String create_data_str = contractCodes + input;

        byte[] pk_arr = keyPair.getPublicKey().toByteArray();
        String accountId = "";
        if (pk_arr.length > 64) {
            byte[] slice = Arrays.copyOfRange(keyPair.getPublicKey().toByteArray(), 1, 65);
            byte[] addHex = Arrays.copyOfRange(Hash.sha3(slice), 12, 32);
            accountId = Hex.toHexString(addHex);
        } else {
            byte[] slice = Arrays.copyOfRange(keyPair.getPublicKey().toByteArray(), 0, 64);
            byte[] addHex = Arrays.copyOfRange(Hash.sha3(slice), 12, 32);
            accountId = Hex.toHexString(addHex);
        }
        
        String gid = GenGid(getRandomString());
        String contract_addr_str = accountId + dataId + contractCodes;
        String kechash = Hex.toHexString(Hash.sha3(contract_addr_str.getBytes()));
        String self_contract_address = kechash.substring(kechash.length() - 40, kechash.length());

        JSONObject post_data = DoTransaction(keyPair, gid, self_contract_address, 0, 100000000000l, create_data_str, "", 6);
        post_data.put("data_id", dataId);
        return post_data;
    }


    private static String GetContractAddress(String dataId, String accountId) {
        String contract_addr_str = accountId + dataId + contractCodes;
        String kechash = Hex.toHexString(Hash.sha3(contract_addr_str.getBytes()));
        return kechash.substring(kechash.length() - 40, kechash.length());
    }

    // DataAuth 确权上链
    public static Response AddDataAuth(KeyPair keyPair, String dataId, String data) {
        JSONObject postData = GenDataAuthParams(keyPair, dataId, data);
        return CallTransaction(postData);
    }

    // GenDataAuthParams 获取数据存证参数
    private static JSONObject GenDataAuthParams(KeyPair keyPair, String dataId, String data) {
        // data = "{\"type\":\"add\", \"data\":" + data + "}";
        data = JSON.toJSONString(data);
        String accountId = GetAccountId(keyPair);
        String to = GetContractAddress(dataId, accountId);
    	String methodName = "Authorization";
        List<Type> inputParameters = new ArrayList<>();
        inputParameters.add(new DynamicBytes(data.getBytes(StandardCharsets.UTF_8)));
        List<TypeReference<?>> outputParameters = new ArrayList<>();
        Function function = new Function(methodName, inputParameters, outputParameters);
        String input = FunctionEncoder.encode(function).substring(2);
        JSONObject post_data = DoTransaction(keyPair, "", to, 0, 0, "", input, 8);
        post_data.put("data_id", dataId);
        return post_data;
    }

    public static Response ReCreateDataAuth(KeyPair keyPair, String dataId, String data) {
        JSONObject postData = GenReCreateDataAuthParams(keyPair, dataId, data);
        return CallTransaction(postData);
    }

    // GenReCreateDataAuthParams 更新发布数据
    private static JSONObject GenReCreateDataAuthParams(KeyPair keyPair, String dataId, String data) {
        data = JSON.toJSONString(data);
        String accountId = GetAccountId(keyPair);
        String to = GetContractAddress(dataId, accountId);
    	String methodName = "Authorization";
        List<Type> inputParameters = new ArrayList<>();
        inputParameters.add(new DynamicBytes(data.getBytes(StandardCharsets.UTF_8)));
        List<TypeReference<?>> outputParameters = new ArrayList<>();
        Function function = new Function(methodName, inputParameters, outputParameters);
        String input = FunctionEncoder.encode(function).substring(2);
        JSONObject post_data = DoTransaction(keyPair, "", to, 0, 0, "", input, 8);
        post_data.put("data_id", dataId);
        post_data.put("republish", 1);
        return post_data;
    }

    // GetAuths 批量查询确权数据
    public static Response GetAuths(KeyPair keyPair, String dataId, int limit, int offset) {
        JSONObject postData = GenGetAuthsParams(keyPair, dataId, limit, offset);
        return QueryContract(postData);
    }

    // GenGetAuthsParams 生成获取确权列表参数
    private static JSONObject GenGetAuthsParams(KeyPair keyPair, String dataId, int limit, int offset) {
        String from = GetAccountId(keyPair);
        String to = GetContractAddress(dataId, from);

    	JSONObject post_data = new JSONObject();
    	String methodName = "GetAuthJson";
        List<Type> inputParameters = new ArrayList<>();
        inputParameters.add(new Uint32(offset));
        inputParameters.add(new Uint32(limit));

        List<TypeReference<?>> outputParameters = new ArrayList<>();
        Function function = new Function(methodName, inputParameters, outputParameters);
        String input = FunctionEncoder.encode(function);
    	post_data.put("input", input.substring(2));
    	post_data.put("address", to);
    	post_data.put("from", from);

        post_data.put("data_id", dataId);
        return post_data;
    }
    
    
    private static String GenGid(String randStr) {
        try{
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(randStr.getBytes("UTF-8"));
            StringBuffer hexString = new StringBuffer();

            for (int i = 0; i < hash.length; i++) {
                String hex = Integer.toHexString(0xff & hash[i]);
                if(hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }

            return hexString.toString();
        } catch(Exception ex){
            throw new RuntimeException(ex);
        }
    }

    private static String getRandomString() {
        StringBuffer s = new StringBuffer();
        UUID uuid = UUID.randomUUID();
        s.append(uuid.toString().replace("-", ""));

        return s.toString();
    }

    private static byte[] longToBytes(long x) {
        ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES);
        buffer.putLong(x);
        return buffer.array();
    }

    private static byte[] changeBytes(byte[] a){
        byte[] b = new byte[a.length];
        for (int i = 0; i < b.length; i++) {
            b[i] = a[b.length - i - 1];
        }
        return b;
    }
    
    private static JSONObject DoTransaction(
    		KeyPair keyPair,
    		String gid,
    		String to,
    		long amount,
    		long prepay,
    		String contract_bytes,
    		String input,
    		long step) {
    	BigInteger pubKey = keyPair.getPublicKey();
    	JSONObject jsonObject = new JSONObject();
    	if (gid.isEmpty()) {
    		gid = GenGid(getRandomString());
    	}
    	
    	byte[] gid_bytes = ByteString.copyFrom(Hex.decode(gid)).toByteArray();
    	jsonObject.put("gid", gid);
    	
    	long gas_limit = 100000000;
        byte[] pk_arr = pubKey.toByteArray();
        if (pk_arr.length <= 64) {
            byte[] tmp_pk_arr = new byte [1 + pk_arr.length];
            System.arraycopy(pk_arr, 0, tmp_pk_arr, 1, pk_arr.length);
            pk_arr = tmp_pk_arr;
        }
        pk_arr[0] = 4;
        jsonObject.put("pubkey", Hex.toHexString(pk_arr));
        System.out.println("pubkey: " + Hex.toHexString(pk_arr));
        jsonObject.put("to", to);
        jsonObject.put("type", step);
        jsonObject.put("amount", amount);
        jsonObject.put("gas_limit", gas_limit);
        jsonObject.put("gas_price", 1);
        jsonObject.put("shard_id", target_sharding_id);
       
        byte[] to_bytes = ByteString.copyFrom(Hex.decode(to)).toByteArray();
        ByteArrayOutputStream hash_stream = new ByteArrayOutputStream();
        hash_stream.write(gid_bytes,0,gid_bytes.length);
        hash_stream.write(pk_arr,0,pk_arr.length);
        hash_stream.write(to_bytes,0,to_bytes.length);        
        byte[] tmp_amount = changeBytes(longToBytes(amount));
        hash_stream.write(tmp_amount,0, tmp_amount.length);
        byte[] gas_limit_bytes = changeBytes(longToBytes(gas_limit));
        hash_stream.write(gas_limit_bytes,0, gas_limit_bytes.length);
        byte[] gas_price = changeBytes(longToBytes(1));
        hash_stream.write(gas_price,0, gas_price.length);
        byte[] bytes_step = changeBytes(longToBytes(step));
        hash_stream.write(bytes_step,0, bytes_step.length);
        
        if (!contract_bytes.isEmpty()) {
        	jsonObject.put("bytes_code", contract_bytes);
        	byte[] input_bytes = ByteString.copyFrom(Hex.decode(contract_bytes)).toByteArray();
            hash_stream.write(input_bytes,0,input_bytes.length);
        }
        
        if (!input.isEmpty()) {
        	jsonObject.put("input", input);
        	byte[] input_bytes = ByteString.copyFrom(Hex.decode(input)).toByteArray();
            hash_stream.write(input_bytes,0,input_bytes.length);
        }

        if (prepay > 0) {
            jsonObject.put("pepay", prepay);
            byte[] tmp_p = changeBytes(longToBytes(prepay));
            hash_stream.write(tmp_p,0, tmp_p.length);
        }

        byte[] tx_hash = Hash.sha3(hash_stream.toByteArray());

        System.out.println("tx_hash: " + Hex.toHexString(tx_hash));
        Sign.SignatureData sign = Sign.signMessage(tx_hash, new ECKeyPair(keyPair.getPrivateKey(), keyPair.getPublicKey()), false);
        jsonObject.put("sign_r", Hex.toHexString(sign.getR()));
        jsonObject.put("sign_s", Hex.toHexString(sign.getS()));
        BigInteger v = Numeric.toBigInt(sign.getV());
        jsonObject.put("sign_v", v.intValue() - 27);
        
        return jsonObject;
    }

    private static Response CallTransaction(JSONObject jsonInputString) {
    	return PostData(GetBaseUrl() + "/transaction", jsonInputString);
    }
    
    private static Response QueryContract(JSONObject jsonInputString) {
    	return PostData(GetBaseUrl() + "/query_contract", jsonInputString);
    }

    private static Response PostData(String path, JSONObject jsonInputString) {
		try {
			URL url = new URL(path);
			CloseableHttpClient client = HttpClients.createDefault();
	        HttpPost httpPost=new HttpPost(path);
	        List<BasicNameValuePair> list=new ArrayList<>();
	        for(String str:jsonInputString.keySet()){
	        	list.add(new BasicNameValuePair(str,jsonInputString.get(str).toString()));
	        }
	       
	        StringEntity stringEntity=new UrlEncodedFormEntity(list,"utf-8");
	        httpPost.setEntity(stringEntity);
	        CloseableHttpResponse execute = client.execute(httpPost);
	        int code = execute.getStatusLine().getStatusCode();

	        HttpEntity entity = execute.getEntity();
	        String content = EntityUtils.toString(entity, "utf-8");

	        client.close();
            return new Response(code, content);
		} catch (IOException e) {
			e.printStackTrace();
            return new Response(-1, e.toString());
		}
    }
}


